- code: |
    ; Say Hello
    print "Hello World!"
    ; Refer to values
    a: 1 b: 2
    x: a + b
    ; Define functions
    times-2: func [n [number!]][n * 2]
    ; Show results in the Red console
    print ["The answer is" times-2 x]
    ; Read URLs
    str: read https://www.red-lang.org/
    ; TBD Set up red-lang URLs that return sample data
    ; Load JSON
    res: load https://jsonplaceholder.typicode.com/todos/1
    print ["ID:" res/userId "Title:" mold res/title]
    ; Or CSV
    url: https://raw.githubusercontent.com/GSA/data/master/dotgov-domains/current-full.csv
    res: load/as url 'csv
    ;print ["CSV result contains" length? res/1 "columns and" subtract length? res 1 "rows"]
    ; Get help in the REPL
    help
  description:
    - lang: en
      title: Example 1
      body: |
        Red will look familiar to most high level programmers,
        and that's by design. Under the hood, it's quite 
        different, deep, and powerful, but you should be able 
        to ramp up and be productive quickly.
        
        To use Red most effectively, you do need to clear your
        mind a bit. Let the language do the heavy lifting, and
        leverage all the datatypes Red has to offer.
    - lang: fr
      title: title here
      body: >
        Example 1 en France
    - lang: cn
      title: title here
      body: > 
        Example 1 in Chinese
- code: |
    data: [
        1 2.3 4% 5x6 07-Aug-2019 12:34:56
        0.0.255 127.0.0.1 #"A"
    ]
    foreach value data [
        print [mold type? value tab value + 1]
    ]

    data: [
        "text" %file http://www.red-lang.org 
        pr@red-lang.org <you're it> #{DECAFBAD}
    ]
    foreach value data [
        print [
            mold type? value tab append value "/test"
        ]
    ]

    data: [
        Red #no-issues /refined (2 + 3)
        blk: [a: 1] key: 'a  'blk/a
        blk/:key  blk/1: :obj/method-or-attr 
    ]
    foreach value data [
        print [mold type? value tab mold :value]
    ]
  description:
    - lang: en
      title: Datatypes Galore
      body: |
        Where most languages have 6-8 datatypes, Red has almost 50. They are
        central to its expressive power, reduce line noise, and improve
        readability. You can type dates, times, URLs, IP and email addresses,
        tags, filenames, 2D coordinates, hashtags, and more directly; just as
        if you were writing for another human to read, which of course you are.
        
        This example, which you can paste into a Red console to see the results,
        shows the homoiconic, reflective power of Red.

        Red also uses a universal path syntax for accessing blocks (arrays),
        maps (associative arrays), objects, and calling functions.
    - lang: fr
      title: title here
      body: >
        Example 3 en France
    - lang: cn
      title: title here
      body: > 
        Example 3 in Chinese
- code: |
    ;-- Counter
    view [
        txt: text data 0
        button "Count" [txt/data: txt/data + 1]
    ]
    
    ;-- Temperature Converter
    c-to-f: func [t][t * (9.0 / 5.0) + 32.0]
    f-to-c: func [t][t - 32.0 * (5.0 / 9.0)]
    t-change: function [
        in-face  "The face that changed"
        out-face "The face to update"
        fn [function!] "Conversion function"
    ][
        t: load in-face/text
        out-face/text: either number? t [
            form round/to fn t .01
        ][""]
    ]
    view [
        tc: field on-key-up [t-change tc tf :c-to-f]
            text "Celsius ="   
        tf: field on-key-up [t-change tf tc :f-to-c]
            text "Farenheight"
    ]
  description:
    - lang: en
      title: Simple GUIs
      body: |
        Two canonical GUI examples: a counter, and a temperature converter.
        
        Yes, these are both fully functional GUI programs.
        
        Even with the cryptic names and lack of comments, they shouldn't be
        hard to understand. We wanted to fit them in the sample space here,
        and Red doesn't force a particular format. While there is a standard
        style guide, you can format things however you want, to most clearly
        express intent or fit a purpose.
    - lang: fr
      title: title here
      body: >
        Example 1 en France
    - lang: cn
      title: title here
      body: > 
        Example 1 in Chinese
- code: |
    to-chan: function [
        "Convert % to color channel"
        value [percent!]
    ][
        to integer! 255 * value
    ]
    view [
        below
        r: slider
        g: slider
        b: slider
        base react [
            face/color: as-color
                to-chan r/data
                to-chan g/data
                to-chan b/data
        ]
    ]
  description:
    - lang: en
      title: Reactive GUI system
      body: |
        Sliders adjust face color via the reactive GUI system. The
        <em>react</em> block is scanned, finds to the <em>r</em>,
        <em>g</em>, and <em>b</em> face references, and links to them,
        automatically listening for events that indicate change.
        <br><br>
        Again, the indentation here is just to fit the sample area,
        it does not control logic as in some whitespace sensitive
        languages.
    - lang: fr
      title: title here
      body: >
        Example 2 en France
    - lang: cn
      title: title here
      body: > 
        Example 2 in Chinese
