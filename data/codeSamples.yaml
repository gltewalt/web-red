- code: |
    ;-- Counter
    view [
        txt: text data 0  button "Count" [
            txt/data: txt/data + 1
        ]
    ]
    ;-- Temperature Converter
    c-to-f: func [t][t * (9.0 / 5.0) + 32.0]
    f-to-c: func [t][t - 32.0 * (5.0 / 9.0)]
    t-change: function [in-face out-face fn][
	    out-face/text: either number? t: load in-face/text [
	        form round/to fn t .01
	    ][""]
    ]
    view [
	    ; Use key-up because on-change doesn't detect event cycles
	    tc: field on-key-up [t-change tc tf :c-to-f]
            text "Celsius ="   
	    tf: field on-key-up [t-change tf tc :f-to-c]
            text "Farenheight"
    ]
  description:
    - lang: en
      title: Example 1
      body: |
        Two canonical GUI examples: a counter, and a temp converter.

        Yes, these are both fully functional GUI programs.

        They should be hard to understand, what with the cryptic
        names and lack of comments.
    - lang: fr
      title: title here
      body: >
        Example 1 en France
    - lang: cn
      title: title here
      body: > 
        Example 1 in Chinese
- code: |
    to-chan: function [
        "Convert % to color channel"
        value [percent!]
    ][
        to integer! 255 * value
    ]
    view [
        below
        r: slider  g: slider  b: slider
        base react [
            face/color: as-color
                to-chan r/data
                to-chan g/data
                to-chan b/data
        ]
    ]
  description:
    - lang: en
      title: Sample - VID Dialect
      body: |
        Sliders adjust face color via the reactive GUI system.
        
        
        Note that the indentation here is just to fit the sample area,
        it does not control logic as in some whitespace sensitive
        languages.
    - lang: fr
      title: title here
      body: >
        Example 2 en France
    - lang: cn
      title: title here
      body: > 
        Example 2 in Chinese
- code: |
    data: [
        1 2.3 4% 5x6 07-Aug-2019 12:34:56
        0.0.255 127.0.0.1 #"A"
    ]
    foreach value data [
        print [mold type? value tab value + 1]
    ]

    data: [
        "text" %file http://www.red-lang.org 
        pr@red-lang.org <you\'re it>
    ]
    foreach value data [
        print [
            mold type? value tab append value "/test"
        ]
    ]

    data: [
        Red #no-issues /refined
        append/dup copy "" #"x" 5
        blk: [a: 1]  key: 'a  blk/:key  blk/1
        (2 + 3) obj/method-or-attr 
    ]
    foreach value data [
        print [mold type? value tab mold :value]
    ]
  description:
    - lang: en
      title: Datatypes galore
      body: |
        This code doesn't do anything very exciting, unless you like being able
        to type dates, times, URLs, IP addresses, tags, and more without using
        strings for everything. Oh, and if you think a universal syntax for
        functions, blocks (arrays), and objects is a good idea.
        
        This example, if you paste it into a Red console to see the results,
        shows the homoiconic, reflective power of Red.
    - lang: fr
      title: title here
      body: >
        Example 3 en France
    - lang: cn
      title: title here
      body: > 
        Example 3 in Chinese
